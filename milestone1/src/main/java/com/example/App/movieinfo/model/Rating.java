package com.example.App.movieinfo.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.Instant;
import java.time.ZoneId;
import java.util.Objects;

@Document(collection = "rating")
public class Rating {
    @Id
    private String id; // Auto-generated by MongoDB
    private Long userId; // User ID, assumed to be set manually and not auto-generated
    private Long movieId;
    private Long rating;
    private Long timestamp;

    public Rating() {}
    public Rating(Long userId, Long movieId, Long rating) {
        this.userId = userId;
        this.movieId = movieId;
        this.rating =  rating;
        this.timestamp = System.currentTimeMillis() / 1000;
    }
    public Rating(Long userId, Long movieId, Long rating, Long timestamp) {
        this.userId = userId;
        this.movieId = movieId;
        this.rating = rating;
        this.timestamp = timestamp;
    }

    public String getId() {
        return this.id;
    }
    public Long getUserId() {
        return this.userId;
    }
    public Long getMovieId() {
        return this.movieId;
    }
    public Long getRating() {
        return this.rating;
    }
    public Long getTimestamp() {
        return this.timestamp;
    }
    public int getYear() {
        return Instant.ofEpochSecond(this.timestamp).atZone(ZoneId.systemDefault()).toLocalDateTime().getYear(); // inefficient
    }
    public void setId(String id) {
        this.id = id;
    }
    public void setUserId(Long userId) {
        this.userId = userId;
    }
    public void setMovieId(Long movieId) {
        this.movieId = movieId;
    }
    public void setRating(Long rating) {
        this.rating = rating;
    }
    public void setTimeStamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Rating rating1 = (Rating) o;
        return Objects.equals(id, rating1.id)
                && Objects.equals(userId, rating1.userId)
                && Objects.equals(movieId, rating1.movieId)
                && Objects.equals(rating, rating1.rating)
                && Objects.equals(timestamp, rating1.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, userId, movieId, rating, timestamp);
    }

    @Override
    public String toString() {
        return "Rating{" +
                "id='" + id + '\'' +
                ", userId=" + userId +
                ", movieId=" + movieId +
                ", rating=" + rating +
                ", timestamp=" + timestamp +
                '}';
    }
}
